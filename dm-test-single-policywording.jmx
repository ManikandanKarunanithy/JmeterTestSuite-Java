<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DMS - Policy Wording" enabled="true">
      <stringProp name="TestPlan.comments">	</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="server-name" elementType="Argument">
            <stringProp name="Argument.name">server-name</stringProp>
            <stringProp name="Argument.value">172.25.24.102</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="policyWordingId" elementType="Argument">
            <stringProp name="Argument.name">policyWordingId</stringProp>
            <stringProp name="Argument.value">212137638242812</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="policyKey" elementType="Argument">
            <stringProp name="Argument.name">policyKey</stringProp>
            <stringProp name="Argument.value">7428A01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="outputTagToParse" elementType="Argument">
            <stringProp name="Argument.name">outputTagToParse</stringProp>
            <stringProp name="Argument.value">document</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="outputDirectory" elementType="Argument">
            <stringProp name="Argument.name">outputDirectory</stringProp>
            <stringProp name="Argument.value">C://temp/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="outputFilename" elementType="Argument">
            <stringProp name="Argument.name">outputFilename</stringProp>
            <stringProp name="Argument.value">policy-wording-result</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="outputFileExtension" elementType="Argument">
            <stringProp name="Argument.name">outputFileExtension</stringProp>
            <stringProp name="Argument.value">docx</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Build Single Policy Wording via KM Doc" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1401371693000</longProp>
        <longProp name="ThreadGroup.end_time">1401371693000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Security Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server-name}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ibs-web-services/ibs/security/authenticate/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.security.MessageDigest;
import org.apache.commons.codec.binary.Base64;
import org.testng.annotations.Test;

String password = &quot;c0c0nut&quot;;
MessageDigest md = MessageDigest.getInstance(&quot;SHA&quot;);

String salt = &quot;g&amp;5d&quot;;

md.update((salt.concat(password)).getBytes());
byte[] digest = md.digest();

byte[] encoded = Base64.encodeBase64(digest);
String encText = (new String(encoded));

vars.put(&quot;password&quot;,encText);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationID</stringProp>
                <stringProp name="Header.value">Windows_Client</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">sbuID</stringProp>
                <stringProp name="Header.value">23</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">username</stringProp>
                <stringProp name="Header.value">mccg</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">password</stringProp>
                <stringProp name="Header.value">${password} </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">computerName</stringProp>
                <stringProp name="Header.value">WESTLPT-88GP12</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">networkUserName</stringProp>
                <stringProp name="Header.value">WESTLPT-88GP12.mccg.net</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">IPAddress</stringProp>
                <stringProp name="Header.value">172.25.103.101</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">OSVersion</stringProp>
                <stringProp name="Header.value">Windows (7)</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">ibs-version</stringProp>
                <stringProp name="Header.value">1.0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">response = prev.getResponseDataAsString();
vars.put(&quot;securitytoken&quot;, response);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Policy Wording Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;PolicyWordingRequest  xmlns=&quot;http://www.omia.com/xml/omia&quot;&gt;&lt;policyWordingRequestElement&gt;&lt;policyWordingId&gt;${policyWordingId}&lt;/policyWordingId&gt;&lt;selectType&gt;1&lt;/selectType&gt;&lt;selectCriteria&gt;${policyKey}&lt;/selectCriteria&gt;&lt;outputFormat&gt;0&lt;/outputFormat&gt;&lt;/policyWordingRequestElement&gt;&lt;/PolicyWordingRequest&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server-name}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ibs-web-services/ibs/documentmanagement/policywording/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">token</stringProp>
                <stringProp name="Header.value">${securitytoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/mccg.ibs+xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
            <stringProp name="DurationAssertion.duration">2</stringProp>
          </DurationAssertion>
          <hashTree/>
          <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="XML Assertion" enabled="false"/>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">1</stringProp>
            <intProp name="SizeAssertion.operator">3</intProp>
          </SizeAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1147132932">aggressive</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.io.IOUtils;
import sun.misc.BASE64Decoder;
import java.text.DecimalFormat;

String response = new String(data);

String tag = vars.get(&quot;outputTagToParse&quot;);
String openingTag = &quot;&lt;&quot; + tag + &quot;&gt;&quot;;
String closingTag = &quot;&lt;/&quot; + tag + &quot;&gt;&quot;;
String outputDirectory = vars.get(&quot;outputDirectory&quot;);
String outputFilename = vars.get(&quot;outputFilename&quot;);
String documentExtension = vars.get(&quot;outputFileExtension&quot;);

DecimalFormat df = new DecimalFormat( &quot;000&quot; );

int currentPosition = 0;
int openingTagIndex = response.indexOf(openingTag, currentPosition);
int counter = 1;

while(openingTagIndex != -1) {

  int closingTagIndex = response.indexOf(closingTag, currentPosition);
  
  String documentContent = response.substring(openingTagIndex + openingTag.length(), closingTagIndex);
  
  byte[] decodedBytes = null;
  
  try {
      BASE64Decoder decoder = new BASE64Decoder();
      decodedBytes = decoder.decodeBuffer(documentContent);
  } catch (IOException e) {
      System.out.println(e.getMessage());
  }
    
  File outputFile = new File(outputDirectory + outputFilename + &quot;-&quot; + df.format(counter) + &quot;.&quot; + documentExtension);
  OutputStream outputStream = null;

  try {
    outputStream = new FileOutputStream(outputFile);
    outputStream.write(decodedBytes);
    outputStream.close();
  } catch (IOException e) {
    
  } finally {
    IOUtils.closeQuietly(outputStream);
  }
  
  currentPosition = closingTagIndex + closingTag.length();
  openingTagIndex = response.indexOf(openingTag, currentPosition);
  counter++;
  
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
